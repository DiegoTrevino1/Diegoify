:root {
    --color-primary:#2584ff;
    --color-secondary: #00d9ff;
    --color-accent: #ff3400;
    --color-headings: #1b0760;
    --color-body:#918ca4;
    --color-body-darker: #5c5577;
    --color-border: #ccc;
    --border-radius: 30px;
}

/* select all elements. Also all elements that are dynamically inserted
before or after */
*, *::after, *::before {
    box-sizing: border-box;
}

/* Typography */
html {
    /* 62.5% of 16px = 10px */
    font-size: 62.5%;

}

body {
    font-family: Inter, Arial, Helvetica, sans-serif;
    font-size: 2.4rem;
    /* 1.5 x font size = 15px */
    line-height: 3rem;
    color: var(--color-body);
}

h1,h2,h3 {
    color: var(--color-headings);
    margin-bottom: 1rem;
    line-height: 1.1;
}

h1 {
    /* 1 x font size of the html element */
    font-size: 7rem;
}

h2 {
    font-size: 4rem;
}

h3 {
    font-size: 3rem;
}

p {
    margin-top: 0;
}

/* standard used across bootstrap iOS etc */
@media screen and (min-width: 1024) {
    body {
        font-size: 1.8rem;
    }

    h1 {
        font-size: 8rem;
    }

    h2 {
        font-size: 4rem;
    }

    h3 {
        font-size: 2.4rem;
    }
}

/* Links */
a {
    text-decoration: none;
}
.link-arrow {
    color: var(--color-accent);
    text-transform: uppercase;
    font-size: 2rem;
    font-weight: bold;
}

.link-arrow::after {
    content: '-->';
    margin-left: 5px;
    transition: margin 0.15s;
}

.link-arrow:hover::after {
    margin-left: 10px;
}

@media screen and (min-width: 1024px) {
    .link-arrow {
        font-size: 1.5rem ;
    }
}

/* Badges */
.badge {
    /* using px b/c we don't want it dependent on font size*/
    border-radius: 20px;
    font-size: 2rem;
    font-weight: 600;
    margin-top: 1rem;
    /* first parameter is horizontal, second is vertical */
    padding: 0.5rem 2rem;
    /* prevents a badge from wrapping into second line. Important
    when you have limited space.*/
    white-space: nowrap;
}

.badge--primary {
    background-color: var(--color-primary);
    color: #fff;
}

.badge--secondary {
    background-color: var(--color-secondary);
    /* text color */
    color: #fff;
}

.badge--small {
    font-size: 1.6rem;
    padding: 0.5rem 1.5rem;
}

@media screen and (min-width: 1024px) {
    .badge {
        font-size: 1.5rem;
    }

    .badge--small {
        font-size: 1.2rem;
    }
}

/* Lists */
.list {
    /* get rid of default bullet point and left padding
    applied from all browers by default */
    list-style: none;
    padding-left: 0;
    color: var(--color-headings);
}

.list--inline .list__item {
    /* use inline-block to set margins */
    display: inline-block;
    margin-right: 2rem;

}

.list--tick {
    list-style-image: url(../images/tick.svg);
    padding-left: 3rem;
}

/* this is nesting, we should avoid it because we can end up with
overly specific selectors */
.list--tick .list__item {
    padding-left: 0.5rem;
    margin-bottom: 3rem;
}

@media screen and (min-width: 1024px) {
    .list--tick .list__item {
        padding-left: 0;
    }
}

/* Icons */

.icon {
    width: 40px;
    height: 40px;
}

.icon--primary {
    fill: var(--color-primary);
}

.icon--small {
    width: 30px;
    height: 30px;
}

.icon--white {
    fill: #fff;
}

.icon--container {
    background-color: #f3f9fa;
    width: 6.4rem;
    height: 6.4rem;
    border-radius: 100%;
    display: inline-flex;
    justify-content: center;
    align-items: center;
}

.icon--container--accent {
    background: var(--color-accent);
}

/* Buttons */

.btn {
    border-radius: 40px;
    border: 0;
    cursor: pointer;
    /* for mobile devices */
    font-size: 1.8rem;
    font-weight: 600;
    margin: 1rem 0;
    /* vertical , horizontal */
    padding: 2rem 3rem;
    text-align: center;
    text-transform: uppercase;
    white-space: nowrap;
}

.btn .icon {
    width: 2rem;
    height: 2rem;
    margin-right: 1rem;
    vertical-align: middle;
}

/* Define a few skin classes, OOP, seperate structure from skin */
.btn--primary {
    background: var(--color-primary);
    color: #fff;
}

.btn--primary:hover{
    /* use css preprocessors, like sass and less */
    /*background: lighten(primary, 10%); */
    background-color: #3a8ffd;
}

.btn--secondary {
    background-color: var(--color-secondary);
    color: #fff;
}

.btn--secondary:hover {
    background: #00c8eb;
}

/* always check/test your code as you go. Don't assume i'll work!! */
.btn--accent{
    background-color: var(--color-accent);
    color: #fff;
}

.btn--accent:hover {
    background-color: #ec3000;
}

.btn--outline {
    background: #fff;
    color: var(--color-headings);
    border: 2px solid var(--color-headings);
}

.btn--outline:hover {
    background-color: var(--color-headings);
    color: #fff;
}

.btn--strectched {
    padding-left: 6rem;
    padding-right: 6rem;
}

/* set display to inline-block because anchor elements are inline
by default, won't work if you give them a width without changing 
to inline block */
.btn--block {
    width: 100%;
    display: inline-block;
}

@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }  
}

/* Inputs */
.input {
    border-radius: var(--border-radius);
    border: 1px solid var(--color-border);
    color: var(--color-headings);
    font-size: 2rem;
    outline: 0;
    padding: 1.5rem 3.5rem;
}
/* To change the placeholder color settings, use pseudoclass 
selector! */
::placeholder {
    color: #cdcbd7;
}

.input-group {
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    /* use flex to rearrange the div*/
    display: flex;
}

/* Nesting to separate border from input component */
.input-group .input {
    border: 0;
    /* this will make the input field grow to take up
    all available space */
    flex-grow: 1;
    /* vertical horizontal */
    padding: 1.5rem 2rem;
}

/* define new rule for buttons inside input groups */
.input-group .btn {
    /* use px because we don't want it dependent on viewport size
    or font size */
    margin: 4px;
}

/* desktop version */
@media screen and (min-width: 1024px){
    .input {
        font-size: 1.5rem;
    }
}


/* Cards */
.card {
    border-radius: 8px;
    /* horizontal and veritcal offset 20px for bluring the shadow
    and making it softer, and 10px to making it bigger */
    box-shadow: 0 0 20px 10px #f3f3f3;
    overflow: visible;
}

.card__header, .card__body {
    padding: 2rem 3rem;
}
/*
    If you have an element with card--primary then the header
    will have the following styles
*/
.card--primary .card__header {
    background-color: var(--color-primary);
    color: #fff;
}

.card--secondary .card__header {
    background-color: var(--color-secondary);
    color: #fff;
}

.card--secondary .badge--secondary {
    background:  #02cdf1;

}

/* Plans */
.plan__name {
    color: #fff;
    margin: 0 0 3rem 0;
    font-weight: 500;
    font-size: 2.4rem;
}

.plan__price {
    font-size: 6rem;
}

.plan__billing-cycle {
    font-size: 2.4 rem;
    font-weight: 300;
    opacity: 0.8;
    margin-right: 1rem;
}

.plan__description {
    font-size: 2rem;
    font-weight: 300;
    letter-spacing: 1px;
    display: block;
    margin-top: 2rem;
}

.plan .list__item {
    margin-bottom: 2rem;
}

.plan--popular .card__header {
    position: relative;
}

/* If we have a plan--popular class, then we want to insert before cardheader*/
.plan--popular .card__header::before {
    content: url(../images/popular.svg);
    width: 40px;
    display: inline-block;
    position: absolute;
    top: -6px;
    right: 5%;
}

@media screen and (min-width: 1024px) {
    .plan__name {
        font-size: 1.4rem;
    }

    .plan__price {
        font-size: 5rem;
    }

    .plan__billing-cycle {
        font-size: 1.6rem;
    }

    .plan__description {
        font-size: 1.7rem;
    }
    
}
/* Media */
.media {
    display: flex;
}

.media__title {
    margin-top: 0;
}

.media__body {
    margin: 0 2rem;
}

.media__image {
    margin-top: 1rem;
}

/* Quotes */
.quote {
    font-size: 3rem;
    font-style: italic;
    color: var(--color-body-darker);
    line-height: 1.3;
}

.quote__text::before {
    content: open-quote;
}

.quote__text::after {
    content: close-quote;;
}

.quote__author {
    font-size: 3rem;
    font-weight: 500;
    font-style: normal;
    margin-top: 1rem;
    margin-bottom: 0rem;
}

.quote__organization {
    color: var(--color-headings);
    opacity: 0.4;
    font-size: 2rem;
    font-style: normal;
}

.quote__line {
    position: relative;
    bottom: 5px
}

@media screen and (min-width: 1024px) {
    .quote {
        font-size: 2.4rem;
    }

    .quote__author {
        font-size: 2.4rem;
    }

    .quote__organization {
        font-size: 1.6rem;
    }
}

/* Grids */
.grid {
    display: grid;
}

/* this only comes into play when the screen is wider than 768px */
@media screen and (min-width: 768px) {
    .grid--1x2 {
        /* 1fr = 1 fraction of the available space, can also write as repeat(2, 1 */
        grid-template-columns: repeat(2, 1fr);
    }
}

@media screen and (min-width: 1024px) {
    .grid--1x3 {
        grid-template-columns: repeat(3, 1fr);
    }
}

/* Testimonials */
.testimonial {
    padding: 3rem;
}

.testimonial__image {
    position: relative;
}

/* using the direct child selector(>) to select the image inside the testimonial */
.testimonial__image > img {
    width: 100%;
}

.testimonial__image > .icon-container {
    position: absolute;
    top: 3rem;
    right: -32px;
}

/* Benefit of BEM convention, we can clearly see the components and their elements */
@media screen and (min-width: 768px) {
    .testimonial .quote, 
    .testimonial .quote__author {
        font-size: 2.4rem;
        margin-right: 1rem;
    }
    .testimonial .quote {
        margin-left: 6rem;
    }
}

/* Callouts */
.callout {
    padding: 4rem;
    border-radius: 5px;
}

.callout--primary {
    background: var(--color-primary);
    color: #fff;
}

.callout__heading {
    color: #fff;
    margin-top: 0;
    font-size: 3rem; /* mobile text size */
}

.callout .btn {
    justify-self: center;
    align-self: center;
    word-spacing: 0px;
}

.callout__content {
    text-align: center;
}

@media screen and (min-width: 768px) {
    .callout .grid--1x2 {
        grid-template-columns: 1fr auto;
    }

    .callout__content {
        text-align: left;
    }

    .callout .btn {
        justify-self: start;
        margin: 0 2rem;
    }
}

/* Collapsibles */
.collapsible__header {
    display: flex;
    justify-content: space-between;
}

.collapsible__heading {
    margin-top: 0rem;
    font-size: 3rem;
}

.collapsible__chevron {
    transform: rotate(-90deg);
    transition: transform 0.3s;
}

.collapsible__content {
    max-height: 0;
    overflow: hidden;
    opacity: 0;
    transition: all 0.5s;
}

.collapsible--expanded .collapsible__chevron {
    transform: rotate(0);
}

.collapsible--expanded .collapsible__content {
    max-height: 100vh;
    opacity: 1;
}

/* Blocks */
.block {
    --padding-vertical: 6rem;
    padding: var(--padding-vertical) 2rem;
}

.block__header {
    text-align: center;
}

.block__heading {
    margin-top: 0px;
}

.block--dark {
    background: #000;
    color: #7b858b;
}

.block--dark .block__heading {
    color: #fff;
}

.block--skewed-right {
    padding-bottom: calc(var(--padding-vertical) + 4rem);
    clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 80%);
    
}

.block--skewed-left {
    padding-bottom: calc(var(--padding-vertical) + 4rem);
    clip-path: polygon(0% 0%, 100% 0%, 100% 80%, 0% 100%);
    
}

.container {
    max-width: 1140px;
    margin: 0 auto;
}

/* Navigation Bar */
.nav {
    background: #000;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    padding: 0 1rem;
    align-items: center;
}

.nav__list {
    width: 100%;
    margin: 0;
}

.nav__item {
    padding: 1rem 2rem;
    border-bottom: 1px solid #222;
}

.nav__item > a {
    color: #d2d0db;
    transition: color 0.3s;
}

.nav__item > a:hover {
    color: #fff;
    opacity: 1;

}

.nav__toggler {
    opacity: 0.5;
    transition: boxshadow 0.2s;
    cursor: pointer;
}

.nav.collapsible--expanded .nav__toggler {
    opacity: 1;
    box-shadow: 0 0 0 3px #666;
    border-radius: 5px;

}

.nav__brand {
    transform: translate(5px)
}

@media screen and (min-width: 768px) {
    .nav__toggler {
        display: none;
    }

    .nav__list {
        width: auto;
        display: flex;
        flex-direction: row;
        justify-content: center;
        font-size: 1.6rem;
        max-height: 100%;
        opacity: 1;
    }

    .nav__item {
        border: 0;
        padding: 1rem 2rem;
    }
}

/* Hero */

.hero {
    clip-path: polygon(0% 0%, 100% 0%, 100% 90%, 0% 100%);
}

.hero__tagline {
    font-size: 2rem;
    color: #b9c3cf;
    letter-spacing: 1px;
    margin: 2rem 0 5rem;
}

.hero__image {
    width: 100%;;
}

@media screen and (min-width: 768px) {
    .hero {
        padding-top: 0px;
    }
    .hero__content {
        text-align: left;
        align-self: center;
    }
}